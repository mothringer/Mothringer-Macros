{"name":"RecoveryCheck","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.98jFmZ3se98tzQN8"}},"scope":"global","command":"const corpse = game.combat.combatant.actor;\ncorpse.rollRecovery();\ngame.combat.nextTurn();","author":"mGuqqcfcnBeqgHV1","img":"systems/pf2e/icons/conditions/wounded.png","actorIds":[],"_id":"2YEAy9n81vztbYhJ"}
{"name":"Dying PC","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.IPzM3glKL278HY8n"}},"scope":"global","command":"(async () => {\nif (!token) {\nui.notifications.warn(\"You must select yourself.\");\nreturn\n}\n\nlet template =\n\t`\n\n<form>\n\t<p>Token: <span style=\"color: darkred\">${token.name}</span></p>\n\t<p><input type=\"checkbox\" id=\"recover\" style=\"width: 80px margin: 0 5px 0 5px\" value=\"true\" />Recovery check success?</p>\n\t<p><input type=\"checkbox\" id=\"critical\" style=\"width: 80px margin: 0 5px 0 5px\" value=\"true\" />Critical?</p>\n\t<p><input type=\"checkbox\" id=\"rollChecks\" style=\"width: 80px margin: 0 5px 0 5px\" value=\"true\" />Add automatic recovery check TurnAlert?</p>\n\t<p><input type=\"checkbox\" id=\"removeWounded\" style=\"width: 80px margin: 0 5px 0 5px\" value=\"true\" />Remove wounded condition?</p>\n</form>`;\n\nlet mustRoll = false;\nlet clearFX = false;\nnew Dialog({\n\ttitle: \"Dying\",\n\tcontent: template,\n\tbuttons: {\n\t\tyes: {\n\t\t\ticon: \"<i class='fas fa-check'></i>\",\n\t\t\tlabel: \"Apply\",\n\t\t\tcallback: () => mustRoll = true\n\t\t},\n\t\tno: {\n\t\t\ticon: \"<i class='fas fa-times'></i>\",\n\t\t\tlabel: \"Cancel\",\n\t\t},        \n\t},\n\tdefault: \"yes\",\n\tclose: html => {\n\t\tif (mustRoll) {\n\t\t\t(async () => {\n\t\t\t\tif (html.find(\"#removeWounded\")[0].checked)\n\t\t\t\t{\n\t\t\t\t\tawait PF2eConditionManager.removeConditionFromToken(token.actor.data.items.find((x) => x.name == \"Wounded\")._id, token);\n\t\t\t\t\tawait addWD(\"wounded\", 0);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst recover = html.find(\"#recover\")[0].checked;\n\t\t\t\tvar woundValue = token.actor.data.data.attributes.wounded.value;\n\t\t\t\tvar dyingValue = token.actor.data.data.attributes.dying.value;\n\t\t\t\tif (recover && dyingValue == 0)\n\t\t\t\t{\n\t\t\t\t\tui.notifications.warn(\"You are not dying.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet cValue = 1;\n\t\t\t\tlet critical = html.find(\"#critical\")[0].checked;\n\t\t\t\tlet rollChecks = html.find(\"#rollChecks\")[0].checked;\n\t\t\t\tif (critical)\n\t\t\t\t\tcValue++;\n\t\t\t\tif (dyingValue == 0)\n\t\t\t\t\tcValue = cValue + woundValue;\n\t\t\t\tlet condition = await PF2eConditionManager.getCondition(\"Dying\");\n\t\t\t\tif (dyingValue == 0)\n\t\t\t\t{\n\t\t\t\t\twoundValue++;\n\t\t\t\t\tawait PF2eConditionManager.addConditionToToken(condition, token);\n\t\t\t\t\tawait PF2eConditionManager.updateConditionValue(token.actor.data.items.find((x) => x.name == \"Dying\")._id, token, cValue)\n\t\t\t\t\tawait updateHUD(\"Dying\");\n\t\t\t\t}\n\t\t\t\telse if (!recover)\n\t\t\t\t{\n\t\t\t\t\tawait PF2eConditionManager.updateConditionValue(token.actor.data.items.find((x) => x.name == \"Dying\")._id, token, dyingValue + cValue)\n\t\t\t\t\tawait updateHUD(\"Dying\");\n\t\t\t\t}\n\t\t\t\tif (recover && cValue >= dyingValue)\n\t\t\t\t\tawait PF2eConditionManager.removeConditionFromToken(token.actor.data.items.find((x) => x.name == \"Dying\")._id, token);\n\t\t\t\telse if (recover)\n\t\t\t\t{\n\t\t\t\t\tawait PF2eConditionManager.updateConditionValue(token.actor.data.items.find((x) => x.name == \"Dying\")._id, token, dyingValue - cValue)\n\t\t\t\t\tawait updateHUD(\"Dying\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (woundValue == 1 && dyingValue == 0)\n\t\t\t\t{\n\t\t\t\t\tcondition = await PF2eConditionManager.getCondition(\"Wounded\");\n\t\t\t\t\tawait PF2eConditionManager.addConditionToToken(condition, token);\n\t\t\t\t}\n\t\t\t\telse if (dyingValue == 0)\n\t\t\t\t{\n\t\t\t\t\tawait PF2eConditionManager.updateConditionValue(token.actor.data.items.find((x) => x.name == \"Wounded\")._id, token, woundValue)\n\t\t\t\t}\n\t\t\t\tawait updateHUD(\"Wounded\");\n\t\t\t\tif (!(recover && cValue >= dyingValue))\n\t\t\t\t{\n\t\t\t\t\tawait updateHUD(\"Unconscious\");\n\t\t\t\t\tawait updateHUD(\"Blinded\");\n\t\t\t\t}\n\t\t\t\tawait updateHUD(\"Prone\");\n\t\t\t\tawait updateHUD(\"Flat-Footed\");\n\n\t\t\t\tawait PF2eStatusEffects._createChatMessage(token)\n\t\t\t\tif (!recover)\n\t\t\t\t\tcValue += dyingValue;\n\t\t\t\telse\n\t\t\t\t\tcValue = Math.max(dyingValue - cValue,0);\n\t\t\t\t\t\n\t\t\t\tawait addWD(\"dying\",cValue);\n\t\t\t\tawait addWD(\"wounded\", woundValue);\n\t\t\t\tif (dyingValue == 0 && !recover && game.combats.active)\n\t\t\t\t\tawait changeInit();\n\n\t\t\t\tif (rollChecks && game.combats.active)\n\t\t\t\t{\n\t\t\t\t\tconst alertData = {\n\t\t\t\t\t\tcombatId: game.combat.data._id,\n\t\t\t\t\t\tname: \"Recovery Check\",\n\t\t\t\t\t\tcreatedRound: game.combat.data.round,\n\t\t\t\t\t\tturnId: game.combat.getCombatantByToken(token.data._id)._id,\n\t\t\t\t\t\tround: 1,\n\t\t\t\t\t\tmacro: \"RecoveryCheck\",\n\t\t\t\t\t\trepeating: {frequency: 1, expire: 0, expireAbsolute: false},\n\t\t\t\t\t\troundAbsolute: false,\n\t\t\t\t\t\tuserId: game.userId,\n\t\t\t\t\t\tendOfTurn: false,\n\t\t\t\t\t}\n\t\t\t\t\tTurnAlert.create(alertData);\n\t\t\t\t}\n\t\t\t\tif (cValue == 0)\n\t\t\t\t{\n\t\t\t\t\tlet alert = TurnAlert.getAlertByName(\"Recovery Check\",game.combat.data._id);\n\t\t\t\t\tif (alert)\n\t\t\t\t\t\tTurnAlert.delete(game.combat.data._id,alert.id);\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t\tif (clearFX) {\n\t\t\tdeathFX(\"remove\")\n\t\t}\n\t}\n\t\n}, {\n\tid: 'pf2-template-creator'\n}).render(true);\n\nfunction updateHUD(type) {\n\tlet updates = [];\n\tlet item = token.actor.items.find(i => i.name === type);\n\tconsole.log(\"item: \"+item)\n\tupdates.push({ \"_id\": item._id, \"data.sources.hud\": true });\n\tactor.updateEmbeddedEntity(\"OwnedItem\", updates);\n}\n\nfunction addWD(type,cValue) {\n\tconsole.log(cValue)\n\tif(cValue >= 0 && cValue <= 4) {\n\t\tif (type == \"dying\")\n\t\t\tactor.update({\"data.attributes.dying.value\":cValue})\n\t\telse\n\t\t\tactor.update({\"data.attributes.wounded.value\":cValue})\n\t}\n}\n\nfunction changeInit() {\n\t//change initiative\n\tlet update = duplicate(game.combats.active);\n\tlet currentTokenID = game.combats.active.current.tokenId\n\tlet currentInit = game.combats.active.data.combatants.find(c => c.tokenId === currentTokenID).initiative\n\tlet combatant = update.combatants.find(i=>i.tokenId===token.id)\n\tcombatant.initiative = parseInt(currentInit)+0.6;\n\tgame.combats.active.update(update);\n}\n\n\n\t\t\t})();","author":"mGuqqcfcnBeqgHV1","img":"systems/pf2e/icons/conditions/dying.png","actorIds":[],"_id":"6EYA2uV6bu0HacHW"}
{"name":"StatusCheck","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"macro-marker":{"activeData":{"icon":"icons/svg/clockwork.svg","tooltip":"StatusCheck                                 ","colour":"#ff0000","trigger":""}},"core":{"sourceId":"Macro.e4pGspKcreEls78t"}},"scope":"global","command":"console.log(args[0] + args[1])\r\nif (args[2] == \"delete\" && args[3] == false) {\r\n\r\n    removeCondition(args[0], args[1])\r\n\r\n}\r\n\r\nif (args[3] == true) {\r\n\r\n    const roll = new Roll(args[4]).roll();\r\n    let myToken = canvas.tokens.placeables.find(token => token.id === args[1]);\r\n\r\n    myToken.actor.update({ 'data.attributes.hp.value': myToken.actor.data.data.attributes.hp.value - roll.total })\r\n\r\n\r\n    roll.toMessage({\r\n        rollMode: \"public\"\r\n    });\r\n}\r\n\r\nfunction removeCondition(type, target) {\r\n\r\n\r\n    let myToken = canvas.tokens.placeables.find(token => token.id === target);\r\n    let delCondition = myToken.actor.data.items.find(i => i.name === type);\r\nconsole.log(delCondition)\r\n    if (type === \"Frightened\" && delCondition.data.value.value > 1) {\r\n        PF2eConditionManager.updateConditionValue(delCondition._id, myToken, delCondition.data.value.value - 1)\r\n    } else {\r\n\r\n        let promise = new Promise(function (resolve, reject) {\r\n            // the function is executed automatically when the promise is constructed\r\n            // after 1 second signal that the job is done with the result \"done\"\r\n            setTimeout(() => resolve(PF2eConditionManager.removeConditionFromToken(delCondition._id, myToken)), 100);\r\n        })\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n","author":"mGuqqcfcnBeqgHV1","img":"icons/svg/clockwork.svg","actorIds":[],"_id":"BoJlu4FGZ48z6TAt"}
{"name":"Condition Setter","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro                                                  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.eCJykctnLFxhmfoE"}},"scope":"global","command":"////// Error checking user for not having the token selected, an active combat, that the token they are targeting or selecting is in combat or not/////\nif (canvas.tokens.controlled == 0) {\n    ui.notifications.warn(\"No token currently active.\");\n    return\n}\n// new selection code as seen in Blackmarrows for selecting a token or target\nvar t = \"\";\nif (game.user.targets.size == 0) {\n    t = token\n} else {\n    //Select targets\n    t = game.user.targets.values().next().value;\n}\n\n// Check if there is an active combat\nif (!game.combat) {\n    ui.notifications.warn(\"No combat currently active.\");\n    return\n}\n\n// Check if the target id is in the combat tracker\nif (!game.combat.getCombatantByToken(t.data._id)) {\n    ui.notifications.warn(\"Token not currently active in combat.\");\n    return\n}\n///////\n// List of involved Variables below.\nvar tokenName = t.data.name;\nvar targetsId = t.id;\n// Declare variables for condition, rounds, value of the condition and whether they start at beginning or end of turn\nvar conditionType, rounds, conditionValue, turnStartEnd,\n    // Persistent damage for damage type and damage value\n    pDamage, pDamageType,\n    //  variables for the chat buttons\n    applyChanges = false,\n    clearDamage = false;\n///\nlet template =\n    `<style>\n#pf2-template-creator header {\n  border-radius: 0;\n  background: linear-gradient(90deg, var(--secondary) 0%, #202b93 50%, var(--secondary) 100%);\n  border: none;\n  box-shadow: inset 0 0 0 1px #9f725b,inset 0 0 0 2px var(--tertiary),inset 0 0 0 3px #956d58;\n  margin-bottom: 2px;\n  font-size: .75rem;\n}\n#pf2-template-creator .window-content {\n  border-image: url(systems/pf2e/assets/sheet/corner-box.png) 9 repeat;\n  height: 600px;\n}\n#pf2-template-creator form {\n  margin-bottom: 30px;\n \n}\n#pf2-template-creator .form-fields.buttons {\n  justify-content: flex-start !important;\n}\n#pf2-template-creator .button {\n  flex: 1 !important;\n  height: 35px;\n  box-shadow: inset 0 0 0 1px #1111FF,inset 0 0 0 1.5px var(--tertiary),inset 0 0 0 1px #1111FF;\n  font-size: 12px;\n  padding: 0;\n  background: #171f69;\n  color: white;\n  cursor: pointer;\n}\n#pf2-template-creator .button:hover {\n  box-shadow: 0 0 4px red;\n}\n#pf2-template-creator .radios input[type=\"radio\"] {\n  opacity: 0;\n  position: fixed;\n  width: 0;\n}\n#pf2-template-creator .radios label {\n  cursor: pointer;\n  display: flex;\n  flex: 1 !important;\n  margin: 2px 1px ;\n  box-shadow: inset 0 0 0 1px #1111FF,inset 0 0 0 1.5px var(--tertiary),inset 0 0 0 1px #1111FF;\n  height: 35px;\n  width: 100%;\n  border-radius: 1px;\n  font-size: 11px;\n  font-family: \"Signika\", sans-serif;\n  justify-content: left;\n  align-items: center;\n  background: #171f69;\n  color: white;\n}\n#pf2-template-creator img{\nwidth: 25px;\nmargin-right: 5px;\n  align-items:left;\n}\n}\n#pf2-template-creator .radios label i {\n  margin-right: 5px;\n  color: white;\n  background: #171f69;\n}\n#pf2-template-creator .radios label:hover {\n  box-shadow: 0 0 8px red;\n}\n#pf2-template-creator .radios input[type=\"radio\"]:checked + label {\n  background: rgba(0, 0, 0, 0.2);\n}\n#pf2-template-creator .dialog-button {\n  height: 50px;\n  background: #171f69;\n  color: white;\n  justify-content: space-evenly;\n  align-items: center;\n  cursor: pointer;\n}\n#pf2-template-creator .notes {\n  float: left;\n  color: black !important;\n  flex: 0 0 100% !important;\n  font-size: 12px !important;\n  line-height: 16px !important;\n  margin: 10px 0 5px 0 !important;\n  width:140px;\nposition:relative;\nleft:30px;\n}\n#pf2-template-creator .notes2 {\n  color: black !important;\n  flex: 0 0 100% !important;\n  font-size: 12px !important;\n  line-height: 16px !important;\n  margin: 10px 0 5px 0 !important;\n  display: none;\n}\n#pf2-template-creator .notes3 {\n  float: left;\n  color: black !important;\n  flex: 0 0 100% !important;\n  font-size: 12px !important;\n  line-height: 16px !important;\n  margin: 10px 0 5px 0 !important;\n  width:140px;\nposition:relative;\nleft:30px;\n  display: none;\n}\n#pf2-template-creator .notes.title {\n  border-bottom: 1px solid #f7d488;\n  font-size: 14px !important;\n  font-weight: bold;\n  margin: 20px 0 10px 0 !important;\n\n}\n\n</style>\n<form>\n<div class=\"form-group\">\n  <p class=\"notes title\">Conditions -   Source: <span style=\"color: darkred\">${token.name}</span> Target: <span style=\"color: darkred\">${t.name}</span></p>\n  <div class=\"form-fields buttons radios\">\n    <!------ Blinded ------->\n    <input type=\"radio\" name=\"Type\" id=\"blinded\" value=\"Blinded\" checked>\n    <label for=\"blinded\" onclick=\"toggleMessage4(true)\"><img src=\"systems/pf2e/icons/conditions/blinded.png\">Blinded</label>\n    \n    <!------ Broken -------> \n    <input type=\"radio\" name=\"Type\" id=broken value=\"Broken\">\n    <label for=\"broken\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/broken.png\">Broken</label>\n\n    <!------ confused -------> \n    <input type=\"radio\" name=\"Type\" id=\"confused\" value=\"Confused\">\n    <label for=\"confused\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/confused.png\">Confused</label>\n\n    <!------ clumsy -------> \n    <input type=\"radio\" name=\"Type\" id=\"clumsy\" value=\"Clumsy\">\n    <label for=\"clumsy\" onclick=\"toggleMessage(false)\"><img src=\"systems/pf2e/icons/conditions/clumsy.png\">Clumsy</label>\n    \n    </div>\n    <div class=\"form-fields buttons radios\">\n\n    <!------ controlled -------> \n    <input type=\"radio\" name=\"Type\" id=\"controlled\" value=\"Controlled\">\n    <label for=\"controlled\" onclick=\"toggleMessage4(true)\"><img src=\"systems/pf2e/icons/conditions/controlled.png\">Controlled</label>\n\n    <!------ dazzled -------> \n    <input type=\"radio\" name=\"Type\" id=\"dazzled\" value=\"Dazzled\">\n    <label for=\"dazzled\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/dazzled.png\">Dazzled</label>\n\n    <!------ Deafened -------> \n    <input type=\"radio\" name=\"Type\" id=deafened value=\"Deafened\">\n    <label for=\"deafened\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/deafened.png\">Deafened</label>\n\n    <!------ Drained -------> \n    <input type=\"radio\" name=\"Type\" id=\"drained\" value=\"Drained\">\n    <label for=\"drained\" onclick=\"toggleMessage(false)\"> <img src=\"systems/pf2e/icons/conditions/drained.png\">Drained</label>\n    \n    </div>\n    <div class=\"form-fields buttons radios\">\n\n    <!------ Enfeebled ------->           \n    <input type=\"radio\" name=\"Type\" id=\"enfeebled\" value=\"Enfeebled\">\n    <label for=\"enfeebled\" onclick=\"toggleMessage(false)\"> <img src=\"systems/pf2e/icons/conditions/enfeebled.png\">Enfeebled</label>\n\n    <!------ Fatigued -------> \n    <input type=\"radio\" name=\"Type\" id=\"fatigued\" value=\"Fatigued\">\n    <label for=\"fatigued\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/fatigued.png\">Fatigued</label>\n\n    <!------ Fascinated -------> \n    <input type=\"radio\" name=\"Type\" id=\"fascinated\" value=\"Fascinated\">\n    <label for=\"fascinated\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/fascinated.png\">Fascinated</label>\n\n    <!------ Fleeing -------> \n    <input type=\"radio\" name=\"Type\" id=\"fleeing\" value=\"Fleeing\">\n    <label for=\"fleeing\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/fleeing.png\">Fleeing</label>\n\n    </div>\n    <div class=\"form-fields buttons radios\">\n\n    <!------ Grabbed -------> \n    <input type=\"radio\" name=\"Type\" id=\"grabbed\" value=\"Grabbed\">\n    <label for=\"grabbed\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/grabbed.png\">Grabbed</label>\n\n    <!------ Immobilized -------> \n    <input type=\"radio\" name=\"Type\" id=immobilized value=Immobilized>\n    <label for=\"immobilized\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/immobilized.png\">Immobilized</label>\n\n    <!------ Invisible -------> \n    <input type=\"radio\" name=\"Type\" id=\"Invisible\" value=\"Invisible\">\n    <label for=\"Invisible\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/invisible.png\">Invisible</label>\n\n    <!------ Frightened -------> \n    <input type=\"radio\" name=\"Type\" id=\"frightened\" value=\"Frightened\">\n    <label for=\"frightened\" onclick=\"toggleMessage2(true),updateRangeValue('End of Turn')\"> <img src=\"systems/pf2e/icons/conditions/frightened.png\">Frightened</label>\n\n    </div>\n    <div class=\"form-fields buttons radios\">\n\n    <!------ Flat-Footed -------> \n   <input type=\"radio\" name=\"Type\" id=\"flatfooted\" value=\"Flat-Footed\">\n    <label for=\"flatfooted\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/flatFooted.png\">F.Footed</label>\n\n    <!------ Persistent Damage -------> \n    <input type=\"radio\" name=\"Type\" id=\"PersistentDamage\" value=\"Persistent Damage\">\n    <label for=\"PersistentDamage\" onclick=\"toggleMessage3(true),updateRangeValue('Start of Turn')\" > <img src=\"systems/pf2e/icons/conditions/persistentDamage.png\">P.Damage</label>\n\n    <!------ Paralyzed -------> \n    <input type=\"radio\" name=\"Type\" id=\"Paralyzed\" value=\"Paralyzed\">\n    <label for=\"Paralyzed\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/paralyzed.png\">Paralyzed</label>\n\n    <!------ Petrified -------> \n    <input type=\"radio\" name=\"Type\" id=\"petrified\" value=\"Petrified\">\n    <label for=\"petrified\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/petrified.png\">Petrified</label>\n\n  </div>\n  <div class=\"form-fields buttons radios\">\n\n   <!------ Prone ------->         \n    <input type=\"radio\" name=\"Type\" id=\"prone\" value=\"Prone\">\n    <label for=\"prone\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/prone.png\">Prone</label>\n\n    <!------ Quickened -------> \n    <input type=\"radio\" name=\"Type\" id=\"Quickened\" value=\"Quickened\">\n    <label for=\"Quickened\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/quickened.png\">Quickened</label>\n\n    <!------ Restrained -------> \n    <input type=\"radio\" name=\"Type\" id=\"Restrained\" value=\"Restrained\">\n    <label for=\"Restrained\" onclick=\"toggleMessage4(true)\"> <img src=\"systems/pf2e/icons/conditions/restrained.png\">Restrained</label>\n\n    <!------ Sickened -------> \n    <input type=\"radio\" name=\"Type\" id=\"Sickened\" value=\"Sickened\">\n    <label for=\"Sickened\" onclick=\"toggleMessage(false)\"> <img src=\"systems/pf2e/icons/conditions/sickened.png\">Sickened</label>\n</div>\n\n  <div class=\"form-fields buttons radios\">\n\n    <!------ Slowed -------> \n    <input type=\"radio\" name=\"Type\" id=\"Slowed\" value=\"Slowed\">\n    <label for=\"Slowed\" onclick=\"toggleMessage(false)\"> <img src=\"systems/pf2e/icons/conditions/slowed.png\">Slowed</label>\n\n    <!------ Stunned -------> \n    <input type=\"radio\" name=\"Type\" id=\"Stunned\" value=\"Stunned\">\n    <label for=\"Stunned\" onclick=\"toggleMessage(false)\"> <img src=\"systems/pf2e/icons/conditions/stunned.png\">Stunned</label>\n\n    <!------ Stupefied -------> \n    <input type=\"radio\" name=\"Type\" id=\"Stupefied\" value=\"Stupefied\">\n    <label for=\"Stupefied\" onclick=\"toggleMessage(false)\"> <img src=\"systems/pf2e/icons/conditions/stupefied.png\">Stupefied</label>\n\n    <!------ Dying -------> \n    <input type=\"radio\" name=\"Type\" id=\"Dying\" value=\"Dying\">\n    <label for=\"Dying\"> <img src=\"systems/pf2e/icons/spells/befuddle.jpg\"></label>\n</div>\n</div>\n\n<!------ Condition Timing Section -------> \n<div class=\"form-group\">\n  <p class=\"notes title\">Condition Timing: <span id=\"turnStartEnd\">Start of Turn</span></p>\n\n  <div class=\"form-fields buttons\">\n    <button type=\"button\" class=\"button\" onclick=\"updateRangeValue('Start of Turn')\">Start of Turn</button>\n    <button type=\"button\" class=\"button\" onclick=\"updateRangeValue('End of Turn')\">End of Turn</button>\n  </div>\n</div>\n\n\n<!------ Persistent Damage Section -------> \n<div class=\"notes2\" id=\"toggle-message3\">\n<div class=\"form-group\">\n\n<!------ Persistent Damage types -------> \n  <label>Persistent Damage:</label>\n  <select id=\"damage_type\" name=\"damage_type\">\n\n    <option value=\"bleeding\">Bleeding</option>\n    <option value=\"fire\">Fire</option>\n    <option value=\"acid\">Acid</option>\n    <option value=\"cold\">Cold</option>\n    <option value=\"electricity\">Electricity</option>\n    <option value=\"mental\">Mental</option>\n    <option value=\"poison\">Poison</option>\n  </select>\n</div>\n\n<div class='form-group'>\n<!------ Persistent Damage values -------> \n <label>Damage:</label>\n <div class='form-fields'><input type=\"text\" id=\"damage\" value=\"1d4\"/></div>\n </div>\n</div>\n\n\n\n<!------ Round Calculator & Condition Value -------> \n<div class=\"notes\" id=\"toggle-message\">\n    Rounds: <input type=\"number\" id=\"rounds\" style=\"width: 50px\" value=\"1\" />    \n</div>       \n<div class=\"notes3\" id=\"toggle-message4\">  \n<center> Condition Value: <input type=\"number\" id=\"cvalue\" style=\"width: 50px\" value=\"1\" /></p> \n</div>\n</form>\n\n<!------ Javascript Section -------> \n<script>\n\nfunction toggleMessage (isVisible) {\n  document.getElementById(\"toggle-message\").style.display = isVisible ? \"none\" : \"block\"\n\n  document.getElementById(\"toggle-message3\").style.display = isVisible ? \"block\" : \"none\"\n  document.getElementById(\"toggle-message4\").style.display = isVisible ? \"none\" : \"block\"\n}\nfunction toggleMessage2 (isVisible) {\n  document.getElementById(\"toggle-message\").style.display = isVisible ? \"none\" : \"block\"\n  document.getElementById(\"toggle-message4\").style.display = isVisible ? \"block\" : \"none\"\n  document.getElementById(\"toggle-message3\").style.display = isVisible ? \"none\" : \"block\"\n}\nfunction toggleMessage3 (isVisible) {\n   document.getElementById(\"toggle-message\").style.display = isVisible ? \"block\" : \"none\"\n\n  document.getElementById(\"toggle-message3\").style.display = isVisible ? \"block\" : \"none\"\n}\nfunction toggleMessage4 (isVisible) {\n   document.getElementById(\"toggle-message\").style.display = isVisible ? \"block\" : \"none\"\n\n  document.getElementById(\"toggle-message3\").style.display = isVisible ? \"none\" : \"block\"\n  document.getElementById(\"toggle-message4\").style.display = isVisible ? \"none\" : \"block\"\n}\nfunction updateRadiusValue(val) {\n  document.getElementById(\"radius\").value = val\n\n}\nfunction updateRangeValue(val) {\n  document.getElementById(\"turnStartEnd\").innerHTML = val\n\n}\n</script>`;\n\n\n\n\nnew Dialog({\n    title: \"Condition Setter\",\n    content: template,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: \"Apply\",\n            callback: () => {\n                applyChanges = true\n            }\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: \"Cancel\",\n        },\n        clear: {\n            icon: \"<i class='fas fa-skull'></i>\",\n            label: \"Clear\",\n            callback: () => clearDamage = true\n        },\n    },\n    default: \"yes\",\n    close: html => {\n\n        // If apply changes is clicked\n        if (applyChanges) {\n            // Grab the selected conditions name\n            conditionType = html.find('[name=\"Type\"]:checked')[0].value;\n            console.log(conditionType)\n            let conditionName;\n            // If condition is not persistent damage, attempt to add condition to the token and update the HUD\n            if (conditionType != \"Persistent Damage\") {\n                (async () => {\n                    conditionType = PF2eConditionManager.getCondition(conditionType); // Get the condition found by loop.\n                    conditionName = conditionType.name;\n                    conditionValue = html.find(\"#cvalue\")[0].value; // get the value found by input\n                    await PF2eConditionManager.addConditionToToken(conditionType, t); // add condition to token\n                    await PF2eConditionManager.updateConditionValue(t.actor.data.items.find((x) => x.name === conditionType.name)._id, t, conditionValue) // find the condition by id on tokens object list, find token and condition value and add to token.\n                    // function provided by Nerull to update the HUD.\n                    function updateHUD(type) {\n                        let updates = [];\n                        let item = t.actor.items.find(i => i.name === conditionType.name);\n                        updates.push({\n                            \"_id\": item._id,\n                            \"data.sources.hud\": true\n                        });\n                        t.actor.updateEmbeddedEntity(\"OwnedItem\", updates);\n                    }\n                   await updateHUD(conditionType)\n                })();\n            }\n\n            // Determine whether effect is start of turn or End of Turn\n            if (document.getElementById(\"turnStartEnd\").innerHTML === \"Start of Turn\") {\n                turnStartEnd = false;\n            } else {\n                turnStartEnd = true;\n            }\n\n\n            // Grabbing the rest of the required Variables for the alert\n            if (game.combat.combatant.initiative > game.combat.getCombatantByToken(t.id).initiative && turnStartEnd)\n\t\t\t\trounds = parseInt(html.find(\"#rounds\")[0].value) - 1;\n\t\t\telse\n\t\t\t\trounds = parseInt(html.find(\"#rounds\")[0].value);\n            pDamage = html.find(\"#damage\")[0].value;\n            pDamageType = html.find(\"#damage_type\")[0].value;\n            let repeat = null;\n            let message = \"\";\n\n\n            // if frightened, add the repeater\n            if (conditionType.name == \"Frightened\")\n\t\t\t{\n\t\t\t\tif (game.combat.combatant.initiative > game.combat.getCombatantByToken(t.id).initiative && turnStartEnd)\n\t\t\t\t\trounds = 0;\n\t\t\t\telse\n\t\t\t\t\trounds = 1;\n\t\t\t\tif (conditionValue > 1)\n\t\t\t\t\trepeat = {\n\t\t\t\t\t\tfrequency: 1,\n\t\t\t\t\t\texpire: conditionValue - 1,\n\t\t\t\t\t\texpireAbsolute: false\n\t\t\t\t\t}\n            }\n            // if persistent damage, add the message\n            if (conditionType == \"Persistent Damage\") {\n                conditionName = \"Persistent Damage\";\n                message = tokenName + \" takes [[/r \" + pDamage + \"#\" + pDamageType + \" damage]] persistent \" + pDamageType + \" damage.<br/>Roll DC 15 Flat check, [[/r 1d20 #flat check vs DC 15]]\"\n                repeat = {\n                    frequency: 1,\n                    expire: 0,\n                    expireAbsolute: false\n                }\n                addPDamage(pDamageType, t)\n            }\n\n\n            // take all collect inputs and established variables and input into function\n            addAlert(rounds, conditionName, t, turnStartEnd, repeat, message, pDamageType)\n\n\n        }\n\n        // if clearDamage is clicked...\n        if (clearDamage) {\n\n            // Establish the condition selected, assume persistent damage type is \"bleeding\" or untyped.\n            conditionType = html.find('[name=\"Type\"]:checked')[0].value;\n            pDamageType = html.find(\"#damage_type\")[0].value;\n\n            // remove the alert, remove the condition\n            removeAlert(conditionType, t)\n\n            // if the type is persistent damage, remove the icon and associated damage type\n            if (conditionType == \"Persistent Damage\") {\n                addPDamage(pDamageType, t)\n            } else {\n                removeCondition(conditionType, t)\n            }\n        }\n    }\n}, {\n    id: 'pf2-template-creator'\n}).render(true);\n\n//// Alert Data Section ///\nfunction addAlert(rounds, name, t, turnStartEnd, repeat, message) {\n  \n    let turnId\n\nif (conditionType.name == \"Frightened\" || \"Persistent Damage\") { \nturnId = game.combat.getCombatantByToken(t.data._id)._id }\nelse {\nturnId = game.combat.getCombatantByToken(token.data._id)._id\n}\n    const combatData = game.combat.data;\n\n/// Remove Statuscheck for Persistent Damage\nlet StatusCheck = \"StatusCheck\";\nlet pFlag = false;\nif (name == \"Persistent Damage\")\n{\npFlag = true\nrounds = 0;\n}\n\n\n    const alertData = {\n        combatId: combatData._id,\n        name: name,\n        createdRound: combatData.round,\n        turnId: turnId,\n        round: rounds,\n        args: [conditionType.name, t.id, \"delete\",pFlag, pDamage],\n        macro: StatusCheck,\n        repeating: repeat,\n        roundAbsolute: false,\n        userId: game.userId,\n        message: message,\n        endOfTurn: turnStartEnd,\n        targetId: targetsId,\n        pDamageType: pDamageType,\n        recipientIds: []\n    }\n    TurnAlert.create(alertData);\n}\n\n\n///Clear Persistent Damage Function ///\nfunction removeAlert(conditionType, t) {\n    if (TurnAlert.find(c => c.name === conditionType && c.pDamageType === pDamageType)) {\n        let alert = TurnAlert.find(c => c.name === conditionType && c.pDamageType === pDamageType);\n        TurnAlert.delete(alert.combatId, alert.id);\n    }\n}\n\nfunction addPDamage(pDamageType, t) {\n    var toggle = pDamageType;\n    switch (toggle) {\n          case \"bleeding\": t.toggleEffect(\"systems/pf2e/icons/spells/blade-barrier.jpg\");\n          break;\n          case 'fire': t.toggleEffect(\"systems/pf2e/icons/spells/flaming-sphere.jpg\")\n          break;\n          case 'acid': t.toggleEffect(\"systems/pf2e/icons/spells/blister.jpg\")\n          break;\n          case 'cold': t.toggleEffect(\"systems/pf2e/icons/spells/chilling-spray.jpg\")\n          break;\n          case 'electricity': t.toggleEffect(\"systems/pf2e/icons/spells/chain-lightning.jpg\")\n          break;\n          case 'mental': t.toggleEffect(\"systems/pf2e/icons/spells/modify-memory.jpg\")\n          break;\n          case 'poison': t.toggleEffect(\"systems/pf2e/icons/spells/acidic-burst.jpg\")\n          break;\n      }\n              \n}\n\nfunction removeCondition(conditionType, t) {\n    if (t.actor.data.items.find(i => i.name === conditionType)) {\n        let delCondition = t.actor.data.items.find(i => i.name === conditionType);\n        PF2eConditionManager.removeConditionFromToken(delCondition._id, t)\n    } else {\n        ui.notifications.warn(\"Condition not found\");\n    }\n    return;\n}","author":"mGuqqcfcnBeqgHV1","img":"systems/pf2e/icons/spells/curse-of-lost-time.jpg","actorIds":[],"_id":"DDzVaArOJx072t0z"}
{"name":"Rest for the Night","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"core":{"sourceId":"Macro.oeNnghKmjhDJ20gt"}},"scope":"global","command":"let toChat = (content) => {\n    let chatData = {\n        user: game.user.id,\n        content,\n        speaker: ChatMessage.getSpeaker(),\n    };\n    ChatMessage.create(chatData, {});\n};\n\n//this function feels like it shouldn't be necessary, but I don't see a cleaner way to do it.\nlet getSlotLevel = (spellcastingEntry,level) => {\n     switch (level) {\n        case 1:\n            return spellcastingEntry.data.slots.slot1;\n        case 2:\n            return spellcastingEntry.data.slots.slot2;\n        case 3:\n            return spellcastingEntry.data.slots.slot3;\n        case 4:\n            return spellcastingEntry.data.slots.slot4;\n        case 5:\n            return spellcastingEntry.data.slots.slot5;\n        case 6:\n            return spellcastingEntry.data.slots.slot6;\n        case 7:\n            return spellcastingEntry.data.slots.slot7;\n        case 8:\n            return spellcastingEntry.data.slots.slot8;\n        case 9:\n            return spellcastingEntry.data.slots.slot9;\n        case 10:\n            return spellcastingEntry.data.slots.slot10;\n        default:\n            return undefined;\n    } \n};\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Rest`,\n  content: `\n    <div>Rest for the night?</div>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Rest`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n        for ( let token of canvas.tokens.controlled ) {\n            console.log(token);\n            const {name} = token;\n            var currentSlot=0;\n            var stop = false;\n            const {sp, hp} = token.actor.data.data.attributes;\n            const {abilities} = token.actor.data.data;\n            const {level, keyability} = token.actor.data.data.details;\n            var frBonus = 1;\n            const FastRecovery = token.actor.data.items.find(({name}) => name === \"Fast Recovery\");\n            if (FastRecovery) { frBonus = 2 }\n            var dmBonus = level.value;\n            var dmDoom = 1;\n            const DreamMay = token.actor.data.items.find(({name}) => name === \"Dream May\");\n            if (DreamMay) { dmBonus = dmBonus*2; dmDoom = 2; }\n            const hpRestored = (Math.max(abilities.con.mod,1)*dmBonus)*frBonus;\n            const spellcastingEntries = token.actor.data.items.filter(i => i.type === \"spellcastingEntry\" && i.name !== \"Scrolls\");\n            \n            //TODO: decrement Drained by 1, remove Drained 0, remove Fatigued\n            \n            for(const entry of spellcastingEntries)\n            {\n                console.log(entry);\n                switch (entry.data.prepared.value) {\n                    case 'prepared':\n                        for(let slotLevel = 1; slotLevel <= 10;slotLevel++)\n                            {\n                                currentSlot = 0;\n                                stop = false;\n                                while (stop == false)\n                                {\n                                    if (typeof getSlotLevel(entry,slotLevel).prepared[currentSlot] === 'undefined' )\n                                    {\n                                       stop = true;\n                                    }\n                                    else\n                                    {\n                                        getSlotLevel(entry,slotLevel).prepared[currentSlot].expended = false;\n                                        currentSlot++;\n                                    }\n                                }\n                            }\n                        break;\n                    case 'spontaneous':\n                        for(let slotLevel = 1; slotLevel <= 10;slotLevel++)\n                        {\n                            getSlotLevel(entry,slotLevel).value = getSlotLevel(entry,slotLevel).max;\n                        }\n                        break;\n                    case '': //focus spells\n                        entry.data.focus.points = entry.data.focus.pool;\n                        break;\n                }\n            }\n            //token.actor.update({'':0});\n            toChat(`${name} goes to bed. ${hpRestored} HP restored. All spell slots recovered. Resolve points refreshed. Doomed Status updated.`);\n            token.actor.update({\n                'data.attributes.hp.value': Math.clamped(0, hp.value+hpRestored, hp.max),\n                'data.attributes.sp.value': sp.max,\n                'data.attributes.resolve.value': abilities[keyability.value].mod,\n                'data.attributes.doomed.value': Math.max(token.actor.data.data.attributes.doomed.value - dmDoom, 0)\n            });\n        }\n      }\n    }\n}).render(true);","author":"mGuqqcfcnBeqgHV1","img":"systems/pf2e/icons/equipment/adventuring-gear/tent.jpg","actorIds":[],"_id":"Ti6azAeYsF6rV20h"}
{"name":"Treat Wounds Macro","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.KuJIwT1kqqHwe6VI"}},"scope":"global","command":"if (!token) return ui.notifications.error(`You must select yourself.`);\nconst rollTreatWounds = async ({DC, bonus, med, name}) => {\n  const checkRoll = new Roll(`1d20 + ${med.value}`).roll();\n  ChatMessage.create({\n    user: game.user.id,\n    type: CHAT_MESSAGE_TYPES.ROLL,\n    roll: checkRoll,\n    flavor: `<strong>Treat Wounds: Medicine</strong> (DC ${DC})`,\n    speaker: ChatMessage.getSpeaker()\n  });\n  const baseRoll = checkRoll.dice[0].total;\n  const crit = baseRoll === 1  ?\n                 -1 :\n               baseRoll === 20 ?\n                 1 : 0;\n  const success = checkRoll.total >= DC + 10 ?\n                    2 :\n                  checkRoll.total >= DC      ?\n                    1 :\n                  checkRoll.total <= DC - 10 ?\n                   -1 : 0;\n\n  let healFormula, successLabel;\n  const bonusString = bonus > 0 ? `+ ${bonus}` : \"\";\n  if (success + crit > 1) {\n    healFormula = `4d8${bonusString}`;\n    successLabel = \"Critical Success\";\n  } else if (success + crit === 1) {\n    healFormula = `2d8${bonusString}`;\n    successLabel = \"Success\";\n  } else if (success + crit < 0) {\n    healFormula = \"1d8\";\n    successLabel = \"Critical Failure\";\n  }\n\n  if (healFormula !== undefined) {\n    const healRoll = new Roll(healFormula).roll();\n    const rollType = success > 0 ? \"Healing\" : \"Damage\";\n    ChatMessage.create({\n      user: game.user.id,\n      type: CHAT_MESSAGE_TYPES.ROLL,\n      flavor: `<strong>${rollType} Roll: Treat Wounds</strong> (${successLabel})`,\n      roll: healRoll,\n      speaker: ChatMessage.getSpeaker()\n    }, { });\n  }\n};\n\n\nconst applyChanges = ($html) => {\n  for (const token of canvas.tokens.controlled) {\n    const {med} = token.actor.data.data.skills;\n    const {name} = token;\n    const mod = parseInt($html.find('[name=\"modifier\"]').val()) || 0;\n    const requestedProf = parseInt($html.find('[name=\"dc-type\"]')[0].value) || 1;\n    const usedProf = requestedProf <= med.rank ? requestedProf : med.rank;\n    const roll = [\n      () => ui.notifications.warn(`${name} is not trained in Medicine and doesn't know how to treat wounds.`),\n      () => rollTreatWounds({DC: 15 + mod, bonus: 0, med, name}),\n      () => rollTreatWounds({DC: 20 + mod, bonus: 10, med, name}),\n      () => rollTreatWounds({DC: 30 + mod, bonus: 30, med, name}),\n      () => rollTreatWounds({DC: 40 + mod, bonus: 50, med, name})\n    ][usedProf];\n\n    roll();\n  }\n};\n\nif (token === undefined) {\n  ui.notifications.warn(\"No token is selected.\");\n} else {\n  const dialog = new Dialog({\n    title: \"Treat Wounds\",\n    content: `\n<div>Select a target DC. Remember that you can't attempt a heal above your proficiency. Attempting to do so will downgrade the DC and amount healed to the highest you're capable of.</div>\n<hr/>\n<form>\n<div class=\"form-group\">\n<label>Medicine DC:</label>\n<select id=\"dc-type\" name=\"dc-type\">\n<option value=\"1\">Trained DC 15</option>\n<option value=\"2\">Expert DC 20, +10 Healing</option>\n<option value=\"3\">Master DC 30, +30 Healing</option>\n<option value=\"4\">Legendary DC 40, +50 Healing</option>\n</select>\n</div>\n<div class=\"form-group\">\n<label>DC Modifier:</label>\n<input id=\"modifier\" name=\"modifier\" type=\"number\"/>\n</div>\n</form>\n`,\n    buttons: {\n      yes: {\n        icon: `<i class=\"fas fa-hand-holding-medical\"></i>`,\n        label: \"Treat Wounds\",\n        callback: applyChanges\n      },\n      no: {\n        icon: `<i class=\"fas fa-times\"></i>`,\n        label: \"Cancel\"\n      },\n    },\n    default: \"yes\"\n  });\n  dialog.render(true);\n}","author":"mGuqqcfcnBeqgHV1","img":"icons/svg/regen.svg","actorIds":[],"_id":"WLyoyYAHOheQmXQf"}
{"name":"Crafting","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Qgd4cxOCIIDmpkQm"}},"scope":"global","command":"if (!token) return ui.notifications.error(`You must select yourself.`);\nlet toChat = (content) => {\n  let chatData = {\n    user: game.user.id,\n    content,\n    speaker: ChatMessage.getSpeaker(),\n  }\n  ChatMessage.create(chatData, {})\n}\n\nconst handleCrits = (roll) => roll === 1 ? -10 : (roll === 20 ? 10 : 0);\n\nlet getDC = (level) => { // Création de DC en fonction du niveau\n  let arrayDC = [14, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 44, 46, 48, 50]\n  var DC = arrayDC[level];\n  return DC;\n}\n\nlet valueIncome = (skillRank, taskLevel) => {\n  let arrayIncome = [\n    [0.01, 0.02, 0.04, 0.08, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 2.5, 3, 4, 6, 8, 8],\n    [0.05, 0.2, 0.3, 0.5, 0.7, 0.9, 1.5, 2, 2.5, 3, 4, 5, 6, 7, 8, 10, 13, 15, 20, 30, 40, 50],\n    [0.05, 0.2, 0.3, 0.5, 0.8, 1, 2, 2.5, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30, 45, 60, 75, 90],\n    [0.05, 0.2, 0.3, 0.5, 0.8, 1, 2, 2.5, 3, 4, 6, 8, 10, 15, 20, 28, 36, 45, 70, 100, 150, 175],\n    [0.05, 0.2, 0.3, 0.5, 0.8, 1, 2, 2.5, 3, 4, 6, 8, 10, 15, 20, 28, 40, 55, 90, 130, 200, 300],\n  ]\n  var GP = arrayIncome[skillRank][taskLevel];\n\n  return GP;\n}\n\nlet rollCrafting = (args) => {\n  let {\n    itmLevel,\n    cra,\n    charLevel,\n    itmType,\n    itmValue,\n    charName,\n    devinSight\n  } = args;\n\n  var roll = new Roll(`d20`).roll().total;\n  var roll2 = new Roll(`d20`).roll().total;\n\n  if (devinSight) {\n    console.log(`BM Macros | Devin's Sight (Before) | Roll: ${roll}, DS: ${roll2}`);\n\n    if (roll2 > roll) {\n      roll = roll2;\n    }\n\n    console.log(`BM Macros | Devin's Sight (After) | Roll: ${roll}, DS: ${roll2}`);\n  }\n\n  var crit = handleCrits(roll);\n\n\n  var DC = getDC(itmLevel);\n\n  if (roll + crit + cra.value >= DC + 10) charLevel++;\n\n  var gp = valueIncome(cra.rank, charLevel);\n\n  if (itmType === \"rare\") DC += 5;\n\n  let message = `${charName} starts crafting a ${itmType} item of level ${itmLevel} by using the equivalent of ${itmValue/2}gp... [[${roll}+${cra.value}]] ! </br> </br>`;\n\n  if (roll + crit + cra.value >= DC + 10) {\n    toChat(`${message} It's a critical success! Each additional day spent Crafting reduces the materials needed to complete the item by an amount of ${gp}gp. </br> ${charName} can pay the equivalent of ${itmValue/2}gp \n    to finish the crafting instantly of spend ${Math.ceil((itmValue/2)/gp)} additionnal days to complete it for free.`);\n  } else if (roll + crit + cra.value >= DC) {\n    toChat(`${message} It's a success. Each additional day spent Crafting reduces the materials needed to complete the item by an amount of ${gp}gp. </br> ${charName} can pay the equivalent of ${itmValue/2}gp \n    to finish the crafting instantly of spend ${Math.ceil((itmValue/2)/gp)} additionnal days to complete it for free.`, );\n  } else if (roll + crit + cra.value < DC - 10) {\n    toChat(`${message} It's a critical failure. ${charName} fails to complete the item. ${charName} ruins ${((itmValue/2)*0.1).toFixed(2)}gp of the raw materials supplied, \n    but can salvage the remaining ${((itmValue/2)*0.9).toFixed(2)}gp. If ${charName} wants to try again, he/she must start over.`);\n  } else if (roll + crit + cra.value < DC) {\n    toChat(`${message} It's a failure. ${charName} can salvage the equivalent in raw materials of ${itmValue/2}gp. If ${charName} wants to try again, he/she must start over..`);\n  }\n\n}\n\nlet applyChanges = false;\nif (actor) {\n  if (actor.data.type === 'character') {\n    new Dialog({\n      title: `Craft Something`,\n      content: `\n    <div>Select the level of the item you want to craft. Don't forget you must possess the formula for it.<div>\n    <hr/>\n    <form>\n      <div class=\"form-group\">\n        <label>Item level:</label>\n        <input id=\"lvl-item\" name=\"lvl-item\" type=\"number\"/>\n      </div>\n      <div class=\"form-group\">\n        <label>Item value (in GP):</label>\n        <input id=\"value-item\" name=\"value-item\" type=\"number\"/>\n      </div>\n      <div class=\"form-group\">\n        <label>Rare item?</label>\n        <input id=\"rare-item\" name=\"rare-item\" type=\"checkbox\" value=\"rare\"/>\n      </div>\n      <div class=\"form-group\">\n        <label>Fortune?</label>\n        <input id=\"fortune\" name=\"fortune\" type=\"checkbox\" value=\"fortune\"/>\n      </div>\n    </form>\n    `,\n      buttons: {\n        yes: {\n          icon: \"<i class='fas fa-check'></i>\",\n          label: `Start Crafting`,\n          callback: () => applyChanges = true\n        },\n        no: {\n          icon: \"<i class='fas fa-times'></i>\",\n          label: `Cancel`\n        },\n      },\n      default: \"yes\",\n      close: html => {\n        if (applyChanges) {\n          for (let token of canvas.tokens.controlled) {\n            var {\n              cra\n            } = actor.data.data.skills;\n            var charLevel = actor.data.data.details.level.value;\n            var charName = actor.data.name;\n            let itmType = html.find('[name=\"rare-item\"]')[0].checked ? \"rare\" : \"commun\";\n            let devinSight = html.find('[name=\"fortune\"]')[0].checked;\n            let itmLevel = parseInt(html.find('[name=\"lvl-item\"]')[0].value) || 0;\n            let itmValue = parseInt(html.find('[name=\"value-item\"]')[0].value) || 0;\n\n            if (itmLevel <= charLevel) {\n\n              if (itmLevel >= 0 && itmLevel <= 20) {\n                if (cra.rank >= 4) {\n                  return rollCrafting({\n                    itmLevel,\n                    cra,\n                    charLevel,\n                    itmType,\n                    itmValue,\n                    charName,\n                    devinSight\n                  });\n                } else if (cra.rank >= 3) {\n                  if (itmLevel < 16) {\n                    return rollCrafting({\n                      itmLevel,\n                      cra,\n                      charLevel,\n                      itmType,\n                      itmValue,\n                      charName,\n                      devinSight\n                    });\n                  } else {\n                    ui.notifications.warn(`That character doesn't have the appropriate proficiency for this item!`);\n                  }\n\n                } else if (cra.rank >= 1) {\n                  if (itmLevel < 9) {\n                    return rollCrafting({\n                      itmLevel,\n                      cra,\n                      charLevel,\n                      itmType,\n                      itmValue,\n                      charName,\n                      devinSight\n                    });\n                  } else {\n                    ui.notifications.warn(`That character doesn't have the appropriate proficiency for this item!`);\n                  }\n                } else {\n                  ui.notifications.warn(`That character isn't trained in Crafting!`);\n                }\n              } else ui.notifications.warn(`Invalid item level!`);\n            } else ui.notifications.warn(`That character doesn't have the appropriate level for this item!`);\n            return;\n          }\n        }\n      }\n    }).render(true);\n  } else if (actor.data.type !== 'character') ui.notifications.warn(`You must target a PC!`);\n} else;","author":"mGuqqcfcnBeqgHV1","img":"icons/tools/smithing/anvil.webp","actorIds":[],"_id":"WPClrGpjn04XVE7w"}
{"name":"Trip","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.RAuqBij70MeKXGwx"}},"scope":"global","command":"if (!token) return ui.notifications.error(`You must select yourself.`);\nif (game.user.targets.size === 0) return ui.notifications.error(`You must target at least one actor.`);\nconst action = {\n    name: \"Trip\",\n    skill: \"Athletics\",\n    targetDC: \"Reflex\",\n    requirements:\n        \"You have at least one hand free. Your target can’t be more than one size larger than you.\",\n    description:\n        \"You try to knock an opponent to the ground. Attempt an Athletics check against the target’s Reflex DC.\",\n    degreesOfSuccess: {\n        criticalSuccess:\n            \"The target falls and lands prone and takes 1d6 bludgeoning damage.\",\n        success: \"The target falls and lands prone.\",\n        criticalFailure: \"You lose your balance and fall and land prone.\",\n    }, // criticalSuccess, success, failure, criticalFailure - leave step absent for no effect\n    maxSize: 1, // maximum steps up in size that the target can be\n    multipleAttackPenalty: true, // absent (false), true, or \"agile\"\n};\n(async () => {\n    const skillRoll = () => {\n        const skillKey = Object.keys(actor.data.data.skills).find(\n            (key) =>\n                actor.data.data.skills[key].name === action.skill.toLowerCase()\n        );\n        const options = actor.getRollOptions([\n            \"all\",\n            \"skill-check\",\n            action.skill.toLowerCase(),\n        ]);\n        actor.data.data.skills[skillKey].roll(event, options, (roll) => {\n            let resultMessage = `<hr /><h3>${action.name}</h3>`;\n            let validTarget = false;\n            const sizeArray = Object.keys(CONFIG.PF2E.actorSizes);\n            const characterSizeIndex = sizeArray.indexOf(\n                actor.data?.data?.traits?.size?.value\n            );\n            for (const target of game.user.targets) {\n                const dc =\n                    target.actor?.data?.data?.saves?.[\n                        action.targetDC.toLowerCase()\n                    ]?.value + 10;\n                if (dc) {\n                    validTarget = true;\n                    resultMessage += `<hr /><b>${target.name}:</b>`;\n                    const legalSize =\n                        action.maxSize >=\n                        sizeArray.indexOf(\n                            target.actor?.data?.data?.traits?.size?.value\n                        ) -\n                            characterSizeIndex;\n                    if (legalSize) {\n                        let successStep =\n                            roll.total >= dc\n                                ? roll.total >= dc + 10\n                                    ? 3\n                                    : 2\n                                : roll.total > dc - 10\n                                ? 1\n                                : 0;\n                        switch (roll.terms[0].results[0].result) {\n                            case 20:\n                                successStep++;\n                                break;\n                            case 1:\n                                successStep--;\n                                break;\n                        }\n                        if (successStep >= 3) {\n                            resultMessage += `<br />💥 <b>Critical Success</b>`;\n                            if (action.degreesOfSuccess?.criticalSuccess) {\n                                resultMessage += `<br />${action.degreesOfSuccess.criticalSuccess}`;\n                            }\n                        } else if (successStep === 2) {\n                            resultMessage += `<br />✔️ <b>Success</b>`;\n                            if (action.degreesOfSuccess?.success) {\n                                resultMessage += `<br />${action.degreesOfSuccess.success}`;\n                            }\n                        } else if (successStep === 1) {\n                            resultMessage += `<br />❌ <b>Failure</b>`;\n                            if (action.degreesOfSuccess?.failure) {\n                                resultMessage += `<br />${action.degreesOfSuccess.failure}`;\n                            }\n                        } else if (successStep <= 0) {\n                            resultMessage += `<br />💔 <b>Critical Failure</b>`;\n                            if (action.degreesOfSuccess?.criticalFailure) {\n                                resultMessage += `<br />${action.degreesOfSuccess.criticalFailure}`;\n                            }\n                        }\n                    } else {\n                        resultMessage += `<br />⚠️ <b>The target is too big!</b>`;\n                    }\n                }\n            }\n            if (validTarget) {\n                ChatMessage.create({\n                    user: game.user._id,\n                    speaker: ChatMessage.getSpeaker(),\n                    content: resultMessage,\n                });\n            }\n        });\n    };\n    const skillRollWithMAP = async (penalty) => {\n        await actor.addCustomModifier(\n            action.skill.toLowerCase(),\n            \"Multiple Attack Penalty\",\n            penalty,\n            \"untyped\"\n        );\n        skillRoll();\n        await actor.removeCustomModifier(\n            action.skill.toLowerCase(),\n            \"Multiple Attack Penalty\"\n        );\n    };\n    if (action.multipleAttackPenalty) {\n        new Dialog({\n            title: `${action.name}`,\n            content: `\n                ${\n                    action.requirements\n                        ? `<strong>Requirements</strong> ${action.requirements}<hr>`\n                        : \"\"\n                }\n                ${action.description ? `${action.description}<hr>` : \"\"}\n            `,\n            buttons: {\n                first: {\n                    label: \"1st attack\",\n                    callback: skillRoll,\n                },\n                second: {\n                    label: \"2nd attack\",\n                    callback: () => {\n                        skillRollWithMAP(\n                            action.multipleAttackPenalty === \"agile\" ? -4 : -5\n                        );\n                    },\n                },\n                third: {\n                    label: \"3rd attack\",\n                    callback: () => {\n                        skillRollWithMAP(\n                            action.multipleAttackPenalty === \"agile\" ? -8 : -10\n                        );\n                    },\n                },\n            },\n            default: \"first\",\n        }).render(true);\n    } else {\n        skillRoll();\n    }\n})();","author":"mGuqqcfcnBeqgHV1","img":"systems/pf2e/icons/conditions-2/prone.png","actorIds":[],"_id":"WY1izohzAwZrE6el"}
{"name":"Disarm","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.RO06hLQGPmY7Tjzx"}},"scope":"global","command":"if (!token) return ui.notifications.error(`You must select yourself.`);\nif (game.user.targets.size === 0) return ui.notifications.error(`You must target at least one actor.`);\nconst action = {\n    name: \"Disarm\",\n    skill: \"Athletics\",\n    targetDC: \"Reflex\",\n    requirements:\n        \"You have at least one hand free. The target can’t be more than one size larger than you.\",\n    description:\n        \"You try to knock something out of an opponent’s grasp. Attempt an Athletics check against the opponent’s Reflex DC.\",\n    degreesOfSuccess: {\n        criticalSuccess:\n            \"You knock the item out of the opponent’s grasp. It falls to the ground in the opponent’s space.\",\n        success:\n            \"You weaken your opponent’s grasp on the item. Until the start of that creature’s turn, attempts to Disarm the opponent of that item gain a +2 circumstance bonus, and the target takes a –2 circumstance penalty to attacks with the item or other checks requiring a firm grasp on the item.\",\n        criticalFailure:\n            \"You lose your balance and become flat-footed until the start of your next turn.\",\n    }, // criticalSuccess, success, failure, criticalFailure - leave step absent for no effect\n    maxSize: 1, // maximum steps up in size that the target can be\n    multipleAttackPenalty: true, // absent (false), true, or \"agile\"\n};\n(async () => {\n    const skillRoll = () => {\n        const skillKey = Object.keys(actor.data.data.skills).find(\n            (key) =>\n                actor.data.data.skills[key].name === action.skill.toLowerCase()\n        );\n        const options = actor.getRollOptions([\n            \"all\",\n            \"skill-check\",\n            action.skill.toLowerCase(),\n        ]);\n        actor.data.data.skills[skillKey].roll(event, options, (roll) => {\n            let resultMessage = `<hr /><h3>${action.name}</h3>`;\n            let validTarget = false;\n            const sizeArray = Object.keys(CONFIG.PF2E.actorSizes);\n            const characterSizeIndex = sizeArray.indexOf(\n                actor.data?.data?.traits?.size?.value\n            );\n            for (const target of game.user.targets) {\n                const dc =\n                    target.actor?.data?.data?.saves?.[\n                        action.targetDC.toLowerCase()\n                    ]?.value + 10;\n                if (dc) {\n                    validTarget = true;\n                    resultMessage += `<hr /><b>${target.name}:</b>`;\n                    const legalSize =\n                        action.maxSize >=\n                        sizeArray.indexOf(\n                            target.actor?.data?.data?.traits?.size?.value\n                        ) -\n                            characterSizeIndex;\n                    if (legalSize) {\n                        let successStep =\n                            roll.total >= dc\n                                ? roll.total >= dc + 10\n                                    ? 3\n                                    : 2\n                                : roll.total > dc - 10\n                                ? 1\n                                : 0;\n                        switch (roll.terms[0].results[0].result) {\n                            case 20:\n                                successStep++;\n                                break;\n                            case 1:\n                                successStep--;\n                                break;\n                        }\n                        if (successStep >= 3) {\n                            resultMessage += `<br />💥 <b>Critical Success</b>`;\n                            if (action.degreesOfSuccess?.criticalSuccess) {\n                                resultMessage += `<br />${action.degreesOfSuccess.criticalSuccess}`;\n                            }\n                        } else if (successStep === 2) {\n                            resultMessage += `<br />✔️ <b>Success</b>`;\n                            if (action.degreesOfSuccess?.success) {\n                                resultMessage += `<br />${action.degreesOfSuccess.success}`;\n                            }\n                        } else if (successStep === 1) {\n                            resultMessage += `<br />❌ <b>Failure</b>`;\n                            if (action.degreesOfSuccess?.failure) {\n                                resultMessage += `<br />${action.degreesOfSuccess.failure}`;\n                            }\n                        } else if (successStep <= 0) {\n                            resultMessage += `<br />💔 <b>Critical Failure</b>`;\n                            if (action.degreesOfSuccess?.criticalFailure) {\n                                resultMessage += `<br />${action.degreesOfSuccess.criticalFailure}`;\n                            }\n                        }\n                    } else {\n                        resultMessage += `<br />⚠️ <b>The target is too big!</b>`;\n                    }\n                }\n            }\n            if (validTarget) {\n                ChatMessage.create({\n                    user: game.user._id,\n                    speaker: ChatMessage.getSpeaker(),\n                    content: resultMessage,\n                });\n            }\n        });\n    };\n    const skillRollWithMAP = async (penalty) => {\n        await actor.addCustomModifier(\n            action.skill.toLowerCase(),\n            \"Multiple Attack Penalty\",\n            penalty,\n            \"untyped\"\n        );\n        skillRoll();\n        await actor.removeCustomModifier(\n            action.skill.toLowerCase(),\n            \"Multiple Attack Penalty\"\n        );\n    };\n    if (action.multipleAttackPenalty) {\n        new Dialog({\n            title: `${action.name}`,\n            content: `\n                ${\n                    action.requirements\n                        ? `<strong>Requirements</strong> ${action.requirements}<hr>`\n                        : \"\"\n                }\n                ${action.description ? `${action.description}<hr>` : \"\"}\n            `,\n            buttons: {\n                first: {\n                    label: \"1st attack\",\n                    callback: skillRoll,\n                },\n                second: {\n                    label: \"2nd attack\",\n                    callback: () => {\n                        skillRollWithMAP(\n                            action.multipleAttackPenalty === \"agile\" ? -4 : -5\n                        );\n                    },\n                },\n                third: {\n                    label: \"3rd attack\",\n                    callback: () => {\n                        skillRollWithMAP(\n                            action.multipleAttackPenalty === \"agile\" ? -8 : -10\n                        );\n                    },\n                },\n            },\n            default: \"first\",\n        }).render(true);\n    } else {\n        skillRoll();\n    }\n})();","author":"mGuqqcfcnBeqgHV1","img":"icons/disarm.png","actorIds":[],"_id":"XN9VIV8pHZ500aJ9"}
{"name":"Toggle Raise Shield","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.ulyTza8vKPTCwarw"}},"scope":"global","command":"// 'Raise Shield' macro that will raised a shield the character has equipped\nlet messageContent = ''\nif (!actor) {\n    ui.notifications.warn(\"You must have an actor selected.\");\n}\n\n(async () => {\n    for (let token of canvas.tokens.controlled) {\n        const shield = token.actor.data.items.filter(item => item.type === 'armor')\n            .filter(armor => armor.data.armorType.value === 'shield')\n            .find(shield => shield.data.equipped.value);\n        if (shield) {\n            if (token.data.effects.includes(\"systems/pf2e/icons/conditions-2/status_acup.png\")) {\n                actor.removeCustomModifier('ac', 'Raised Shield')\n                token.toggleEffect(\"systems/pf2e/icons/conditions-2/status_acup.png\")\n                messageContent = 'Lowers their shield'\n            } else {\n                actor.addCustomModifier('ac', 'Raised Shield', Number(shield.data.armor.value), 'circumstance');\n                token.toggleEffect(\"systems/pf2e/icons/conditions-2/status_acup.png\")\n                messageContent = 'Raises their shield'\n            };\n\n\n        } else ui.notifications.warn(\"You must have a shield equipped.\");\n    }\n})();\n// create the message\nif (messageContent !== '') {\n    let chatData = {\n        user: game.user._id,\n        speaker: ChatMessage.getSpeaker(token),\n        content: messageContent,\n    };\n    ChatMessage.create(chatData, {});\n}","author":"mGuqqcfcnBeqgHV1","img":"systems/pf2e/icons/conditions-2/status_acup.png","actorIds":[],"_id":"hNxOpOBVjBNVuL5G"}
{"name":"Counteract Check","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"core":{"sourceId":"Macro.ALyqu0uICDoRNO3f"}},"scope":"global","command":"/// creating counterspell levels\n\nlet optsLevels = [\n  // create object data for Set DC based on counterspell level\n  {level: -2, dc: 12, counterLevel: -2},\n  {level: -1, dc: 13, counterLevel: -1},\n  {level: 0, dc: 14, counterLevel: 0},\n  {level: 1, dc: 15, counterLevel: 1, spellLevel: 1},\n  {level: 2, dc: 16, counterLevel: 1},\n  {level: 3, dc: 18,counterLevel: 2, spellLevel: 2},\n  {level: 4, dc: 19,counterLevel: 2},\n  {level: 5, dc: 20,counterLevel: 3, spellLevel: 3},\n  {level: 6, dc: 22,counterLevel: 3},\n  {level: 7, dc: 23,counterLevel: 4, spellLevel: 4},\n  {level: 8, dc: 24,counterLevel: 4},\n  {level: 9, dc: 26,counterLevel: 5, spellLevel: 5},\n  {level: 10, dc: 27,counterLevel: 5},\n  {level: 11, dc: 28,counterLevel: 6,spellLevel: 6},\n  {level: 12, dc: 30,counterLevel: 6},\n  {level: 13, dc: 31,counterLevel: 7, spellLevel: 7},\n  {level: 14, dc: 32,counterLevel: 7},\n  {level: 15, dc: 34,counterLevel: 8, spellLevel: 8},\n  {level: 16, dc: 35,counterLevel: 8},\n  {level: 17, dc: 36,counterLevel: 9,spellLevel: 9},\n  {level: 18, dc: 38,counterLevel: 9},\n  {level: 19, dc: 39,counterLevel: 10,spellLevel: 10},\n  {level: 20, dc: 40,counterLevel: 10},\n  {level: 21, dc: 42,counterLevel: 11},\n  {level: 22, dc: 44,counterLevel: 11},\n  {level: 23, dc: 46,counterLevel: 12},\n  {level: 24, dc: 48,counterLevel: 12},\n  {level: 25, dc: 50,counterLevel: 13},\n];\n\n/// code to select a token\nlet selectedtokens = canvas.tokens.controlled;\n// new selection code as seen in Blackmarrows \nif (selectedtokens.length != 1) {\n ui.notifications.warn(\"You must select exactly 1 token.\");\n return;\n}\n\nlet pc;\n\nfor (let selectedtoken of selectedtokens) {\n if (selectedtoken.actor.data.type === \"character\" && pc === undefined) {\n  pc = selectedtoken.actor;\n }\n}\nif (pc === undefined) {\n ui.notifications.warn(\"You must select a player token.\"); // Changed \"target\" to \"select\"\n return;\n}\n\nlet applyChanges = false;\n\nnew Dialog({\n  title: `Counteract`,\n  content: `\n<style>\n      #pf2-template-creator header {\n        border-radius: 0;\n        background: linear-gradient(90deg, var(--secondary) 0%, #202b93 50%, var(--secondary) 100%);\n        border: none;\n        box-shadow: inset 0 0 0 1px #9f725b,inset 0 0 0 2px var(--tertiary),inset 0 0 0 3px #956d58;\n        margin-bottom: 2px;\n        font-size: .75rem;\n      }\n      #pf2-template-creator .window-content {\n        border-image: url(systems/pf2e/assets/sheet/corner-box.png) 9 repeat;\n      }\n      #pf2-template-creator form {\n        margin-bottom: 20px;\n\n      }\n      #pf2-template-creator .form-fields.buttons {\n        justify-content: flex-start !important;\n      }\n      #pf2-template-creator .button {\n        flex: 1 !important;\n        border-width: 9px;\n        border-image: url(systems/pf2e/assets/sheet/corner-box.png) 9 repeat;\n        font-size: 12px;\n        padding: 0;\n        background: #171f69;\n        color: #ffefbd;\n        cursor: pointer;\n      }\n      #pf2-template-creator .button:hover {\n        box-shadow: 0 0 8px white;\n      }\n      #pf2-template-creator .radios input[type=\"radio\"] {\n        opacity: 0;\n        position: fixed;\n        width: 0;\n      }\n      #pf2-template-creator .radios label {\n        cursor: pointer;\n        display: flex;\n        flex: 1 !important;\n        margin: -2px 0;\n        background: rgba(0, 0, 0, 0.1);\n        border: 2px groove #f0f0e0;\n        width: 100%;\n        border-radius: 3px;\n        font-size: 13px;\n        font-family: \"Signika\", sans-serif;\n        justify-content: center;\n        align-items: center;\n        background: #171f69;\n        color: #ffefbd;\n        border-width: 9px;\n        border-image: url(systems/pf2e/assets/sheet/corner-box.png) 9 repeat;\n      }\n      #pf2-template-creator .radios label i {\n        margin-right: 5px;\n        color: #ffefbd;\n        background: #171f69;\n      }\n      #pf2-template-creator .radios label:hover {\n        box-shadow: 0 0 8px white;\n      }\n      #pf2-template-creator .radios input[type=\"radio\"]:checked + label {\n        background: rgba(0, 0, 0, 0.2);\n      }\n      #pf2-template-creator .dialog-button {\n        height: 50px;\n        background: #171f69;\n        color: #ffffff;\n        justify-content: space-evenly;\n        align-items: center;\n        cursor: pointer;\n      }\n      #pf2-template-creator .notes {\n        color: #ffefbd !important;\n        flex: 0 0 100% !important;\n        font-size: 12px !important;\n        line-height: 16px !important;\n        margin: 10px 0 5px 0 !important;\n      }\n      #pf2-template-creator .notes.title {\n        border-bottom: 1px solid #f7d488;\n        font-size: 14px !important;\n        font-weight: bold;\n        margin: 20px 0 10px 0 !important;\n      }\n    </style>\n        <div>Select the spell level you are trying to counter.\n\n        </br></br> If the effect you intend to counter is not a spell then enter the level of the effect you are attempting to counteract.<div>\n        <hr/>\n\n\n        <form>          \n            <div class=\"form-group\">\n            <label>Modifier for Roll:</label>\n            <input id=\"modifier\" name=\"modifier\" type=\"number\"/>\n          </div>\n<hr>\n          <div class=\"form-group\">\n            <label>Attacker's Spell level:</label>\n            <select name=\"atkCounterLevel\" id=\"atkCounterLevel\">\n              <option value=0></option>\n              <option value=1>1st level Spell</option>\n              <option value=3>2nd level Spell</option>\n              <option value=5>3rd level Spell</option>\n              <option value=7>4th level Spell</option>\n              <option value=9>5th level Spell</option>\n              <option value=11>6th level Spell</option>\n              <option value=13>7th level Spell</option>\n              <option value=15>8th level Spell</option>\n              <option value=17>9th level Spell</option>\n              <option value=19>10th level Spell</option>\n            </select>\n          </div>\n          <div class=\"form-group\">\n            <label>Attacker's Effect Level:</label>\n            <input id=\"atkEffectLevel\" name=\"atkEffectLevel\" type=\"number\"/>\n          </div>\n\n<hr>\n          <div> The power of what is being countered\n            <div class=\"form-group\">\n            <label>Defender's DC:</label>\n            <input id=\"defenderDC\" name=\"defenderDC\" type=\"number\"/>\n          </div> \n           <hr>\n          <div class=\"form-group\">\n            <label>Defender's Spell level:</label>\n           <select name=\"defCounterLevel\" id=\"defCounterLevel\">\n              <option value=0></option>\n              <option value=1>1st level Spell</option>\n              <option value=3>2nd level Spell</option>\n              <option value=5>3rd level Spell</option>\n              <option value=7>4th level Spell</option>\n              <option value=9>5th level Spell</option>\n              <option value=11>6th level Spell</option>\n              <option value=13>7th level Spell</option>\n              <option value=15>8th level Spell</option>\n              <option value=17>9th level Spell</option>\n              <option value=19>10th level Spell</option>\n            </select>\n          </div>\n          <div class=\"form-group\">\n            <label>Defender's Effect Level:</label>\n            <input id=\"defEffectLevel\" name=\"defEffectLevel\" type=\"number\"/>\n          </div>\n        </form>\n<hr>\n        `,\n  buttons: {\n   yes: {\n    icon: \"<i class='fas fa-check'></i>\",\n    label: `Counteract`,\n    callback: () => applyChanges = true\n   },\n   no: {\n    icon: \"<i class='fas fa-times'></i>\",\n    label: `Cancel`\n   },\n  },\n  default: \"yes\",\n  close: html => {\n   if (applyChanges) {\n    /// obtain values from input\n\n    let atkLevel = Math.ceil((parseInt(html.find('[name=\"atkCounterLevel\"]')[0].value) || 0) / 2);\n    let atkEffectLevel = Math.ceil((parseInt(html.find('[name=\"atkEffectLevel\"]')[0].value) || 0) / 2);\n    let defLevel = Math.ceil((parseInt(html.find('[name=\"defCounterLevel\"]')[0].value) || 0) / 2);\n    let defEffectLevel = Math.ceil((parseInt(html.find('[name=\"defEffectLevel\"]')[0].value) || 0) / 2);\n    let counterModifier = parseInt(html.find('[name=\"modifier\"]')[0].value) || 0;\n    let defDC = parseInt(html.find('[name=\"defenderDC\"]')[0].value) || 0;\n\n    /// Calculate Counteract level\n    let finalAtkCounterLevel;\n    if (atkLevel > atkEffectLevel) {\n     finalAtkCounterLevel = atkLevel\n    } else {\n     finalAtkCounterLevel = atkEffectLevel\n    };\n\n\n\n    let finalDefCounterLevel;\n    if (defLevel > defEffectLevel) {\n     finalDefCounterLevel = defLevel\n    } else {\n     finalDefCounterLevel = defEffectLevel\n    };\n\n    /// search table for DC value and compare\n    let dcValue = optsLevels.find(x => x.level === defLevel).dc;\n    let dcValue2 = optsLevels.find(x => x.level === defEffectLevel).dc;\n\n    let finalDC;\n\n    if (defDC > 0) {\n     finalDC = defDC\n    } else if (dcValue > dcValue2) {\n     finalDC = dcValue\n    } else {\n    finalDC = dcValue2\n};\n\n    /// Dice rolling: Handle crits and dice rolls and create message.\n\n    const handleCrits = (roll) => roll === 1 ? -10 : (roll === 20 ? 10 : 0);\n\n    const roll = new Roll(`d20`).roll().total;\n    const crit = handleCrits(roll)\n\n    let message = `<b> Counteract Results</b><br> you rolled a [[${roll+counterModifier}]], `;\n    let message2;\n\n    if (roll + crit + counterModifier >= finalDC + 10) {\n     message2 = (`Critical Success!<br><hr><b>Critical Success</b> Counteract the target if its counteract level is no more than 3 levels higher than your effect’s counteract level.`);\n    } else if (roll + crit + counterModifier >= finalDC) {\n     message2 = (`Success! <br><hr><b>Success</b> Counteract the target if its counteract level is no more than 1 level higher than your effect’s counteract level.`);\n    } else if (roll + crit + counterModifier < finalDC - 10) {\n     message2 = (`Critical Failure! <br><hr><b>Critical Failure</b> You fail to counteract the target.`);\n    } else if (roll + crit + counterModifier < finalDC) {\n     message2 = (`Failure! <br><hr><b>Failure</b> Counteract the target if its counteract level is lower than your effect’s counteract level.`);\n    }\n\n    /// Create to chat information using function bound to toChat\n    let toChat = (content) => {\n     let chatData = {\n      user: game.user.id,\n      content,\n      speaker: ChatMessage.getSpeaker(),\n     }\n     ChatMessage.create(chatData, {})\n    }\n\n    toChat(`Attempting to counteract an effect!<br><br> <b>${token.name}</b> <br>Counteract level:<b> ${finalAtkCounterLevel}</b>.<br><br><b>Target Effect </b>(DC ${finalDC}) <br> Counteract level:<b> ${finalDefCounterLevel}.</b><br><br>${message}${message2}\n`)\n   }\n  }\n },\n\n {\n  id: 'pf2-template-creator'\n }).render(true);","author":"mGuqqcfcnBeqgHV1","img":"systems/pf2e/icons/spells/dispel-magic.jpg","actorIds":[],"_id":"nbI5Trx2v1f0ZS1t"}
{"name":"Earn Income","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Y3O2aO0co7VxxKMB"}},"scope":"global","command":"if (!token) return ui.notifications.error(`You must select yourself.`);\nlet toChat = (content) => {\n  let chatData = {\n    user: game.user.id,\n    content,\n    speaker: ChatMessage.getSpeaker(),\n  }\n  ChatMessage.create(chatData, {})\n}\n\nconst handleCrits = (roll) => roll === 1 ? -10 : (roll === 20 ? 10 : 0);\n\n// Creates the DC based on character level\nlet getDC = (level) => { \n  let arrayDC = [14, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 44, 46, 48, 50]\n  var DC = arrayDC[level];\n  return DC;\n}\n// Get the value of income based on the skill rank and the level of the task\nlet valueIncome = (skillRank, taskLevel) => { \n  let arrayIncome = [\n    [0.01, 0.02, 0.04, 0.08, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 2.5, 3, 4, 6, 8, 8],\n    [0.05, 0.2, 0.3, 0.5, 0.7, 0.9, 1.5, 2, 2.5, 3, 4, 5, 6, 7, 8, 10, 13, 15, 20, 30, 40, 50],\n    [0.05, 0.2, 0.3, 0.5, 0.8, 1, 2, 2.5, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30, 45, 60, 75, 90],\n    [0.05, 0.2, 0.3, 0.5, 0.8, 1, 2, 2.5, 3, 4, 6, 8, 10, 15, 20, 28, 36, 45, 70, 100, 150, 175],\n    [0.05, 0.2, 0.3, 0.5, 0.8, 1, 2, 2.5, 3, 4, 6, 8, 10, 15, 20, 28, 40, 55, 90, 130, 200, 300],\n  ]\n  var GP = arrayIncome[skillRank][taskLevel];\n\n  return GP;\n}\n\nlet earnIncome = (taskLevel, charName, skillRank, skillMod, days) => {\n  var DC = getDC(taskLevel),\n    gp = 0;\n  var critFailure = false;\n\n  var roll = new Roll(`d20`).roll().total;\n  var crit = handleCrits(roll);\n\n  let message = `${charName} starts a task of level ${taskLevel} for ${days} day(s)... [[${roll}+${skillMod}]] ! </br> </br>`;\n\n  // Modify the task level for incoming calculation\n  if (roll + crit + skillMod >= DC + 10) {\n    taskLevel++;\n  } else if (roll + crit + skillMod >= DC) {\n\n  } else if (roll + crit + skillMod < DC - 10) {\n    critFailure = true;\n  } else if (roll + crit + skillMod < DC) {\n    skillRank = 0;\n  }\n\n  if (!critFailure) {\n    gp = valueIncome(skillRank, taskLevel);\n\n    if (roll + crit + skillMod >= DC + 10) {\n      toChat(`${message} That's a critical success! ${charName} manages to earn ${gp}gp per day, for a final salary of ${(gp*days).toFixed(2)}gp!`);\n    } else if (roll + crit + skillMod >= DC) {\n      toChat(`${message} It's a success! ${charName} manages to earn ${gp}gp per day, for a final salary of ${(gp*days).toFixed(2)}gp!`);\n    } else if (roll + crit + skillMod < DC) {\n      toChat(`${message} It's a failure... ${charName} only manages to earn ${gp}gp per day, for a final salary of ${(gp*days).toFixed(2)}gp...`);\n    }\n\n  } else {\n    toChat(`${message} It's a critical failure! ${charName} earns nothing for his/her work and is fired immediately. ${charName} can’t continue at the task. \n    ${charName}'s reputation suffers, potentially making it difficult for him/her to find rewarding jobs in that community in the future...`);\n  }\n}\n\n\nlet applyChanges = false;\n\nif (actor) {\n  if (actor.data.type === 'character') {\n    new Dialog({\n      title: `Earn Income`,\n      content: `\n        <div>Select the skill you want to use to Earn Income and the skill your character will use for it. Remember you need to be at least Trained in that skill in order to make the Earn Income action.\n        </br></br> If Custom Task Level stays empty, the task level will automatically calculated using your character level.<div>\n        <hr/>\n        <form>\n          <div class=\"form-group\">\n            <label>Skill:</label>\n            <select name=\"skill-used\" id=\"skill-used\">\n              <option value=\"crafting\">Crafting</option>\n              <option value=\"performance\">Performance</option>\n              <option value=\"lore-trained\">Lore (T)</option>\n              <option value=\"lore-expert\">Lore (E)</option>\n              <option value=\"lore-master\">Lore (M)</option>\n              <option value=\"lore-legendary\">Lore (L)</option>\n            </select>\n          </div>\n          <div class=\"form-group\">\n            <label>Number of days:</label>\n            <input id=\"days\" name=\"days\" type=\"number\"/>\n          </div>\n          <div class=\"form-group\">\n            <label>Custom Task level:</label>\n            <input id=\"tsk-lvl\" name=\"tsk-lvl\" type=\"number\"/>\n          </div>\n          <div class=\"form-group\">\n            <label>Pathfinder Society?</label>\n            <input id=\"pfs\" name=\"pfs\" type=\"checkbox\" value=\"pfs\"/>\n          </div>\n          <div class=\"form-group\">\n            <label>PFS Experienced Smuggler?</label>\n            <input id=\"pfs-smug\" name=\"pfs-smug\" type=\"checkbox\" value=\"pfs-smug\"/>\n          </div>\n        </form>\n        `,\n      buttons: {\n        yes: {\n          icon: \"<i class='fas fa-check'></i>\",\n          label: `Earn Income`,\n          callback: () => applyChanges = true\n        },\n        no: {\n          icon: \"<i class='fas fa-times'></i>\",\n          label: `Cancel`\n        },\n      },\n      default: \"yes\",\n      close: html => {\n        if (applyChanges) {\n          for (let token of canvas.tokens.controlled) {\n            var {\n              cra\n            } = actor.data.data.skills;\n            var {\n              prf\n            } = actor.data.data.skills;\n            var charLevel = actor.data.data.details.level.value;\n            var charName = actor.data.name;\n            var skillRank = 0,\n              skillMod = 0,\n              taskLevel = 0;\n            let skillUsed = html.find('[name=\"skill-used\"]')[0].value || \"none\";\n            let days = parseInt(html.find('[name=\"days\"]')[0].value) || 0;\n            let pfs = html.find('[name=\"pfs\"]')[0].checked;\n            let pfsSmuggler = html.find('[name=\"pfs-smug\"]')[0].checked;\n            let customTaskLevel = parseInt(html.find('[name=\"tsk-lvl\"]')[0].value)\n\n            if (customTaskLevel) {\n              taskLevel = customTaskLevel;\n            } else {\n              if (pfsSmuggler) {\n                taskLevel = charLevel - 1;\n              } else if (pfs) {\n                taskLevel = Math.max(charLevel - 2, 0);\n              } else taskLevel = charLevel;\n            }\n\n            switch (skillUsed) {\n              case \"crafting\":\n                skillRank = cra.rank;\n                skillMod = cra.totalModifier;\n                break;\n              case \"performance\":\n                skillRank = prf.rank;\n                skillMod = prf.totalModifier;\n                break;\n              case \"lore-trained\":\n                skillRank = 1;\n                skillMod = actor.data.data.abilities.int.mod + charLevel + 2;\n                break;\n              case \"lore-expert\":\n                skillRank = 2;\n                skillMod = actor.data.data.abilities.int.mod + charLevel + 4;\n                break;\n              case \"lore-master\":\n                skillRank = 3;\n                skillMod = actor.data.data.abilities.int.mod + charLevel + 6;\n                break;\n              case \"lore-legendary\":\n                skillRank = 4;\n                skillMod = actor.data.data.abilities.int.mod + charLevel + 8;\n                break;\n              default:\n                skillRank = 0;\n                skillMod = 0;\n                break;\n                Z\n            }\n\n            if (days) {\n              if (skillRank) {\n                earnIncome(taskLevel, charName, skillRank, skillMod, days);\n              } else ui.notifications.warn(\"That character isn't trained in that skill!\");\n            } else ui.notifications.warn(\"You must work at least a day!\");\n\n\n            return;\n          }\n        }\n      }\n    }).render(true);\n  } else if (actor.data.type !== 'character') ui.notifications.warn(\"You must target a PC!\");\n} else;","author":"mGuqqcfcnBeqgHV1","img":"systems/pf2e/icons/equipment/treasure/currency/gold-pieces.jpg","actorIds":[],"_id":"wSMsFua2Re2LhhkW"}
{"name":"Vision and Light","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.3XKY3hQcCniP2out"}},"scope":"global","command":"(async () => {\nif (canvas.tokens.controlled.length === 0)\n{\n\tui.notifications.warn(\"You must select at least one token.\");\n\treturn\n}\n\n\nlet template =\n\t`\n\n<form>\n\t<p>Updating lighting and vision for <span style=\"color: darkred\">${canvas.tokens.controlled.length}</span> tokens.</p>\n\t<p><b>Vision Type:</b></p>\n\t<p><input type=\"radio\" name=\"vision\" value=\"Normal\"/> Normal\n\t<input type=\"radio\" name=\"vision\" value=\"Low-light\"/> Low-light\n\t<input type=\"radio\" name=\"vision\" value=\"Darkvision\"/> Darkvision</p>\n\t<p><b>Light Source:</b></p>\n\t<p><input type=\"radio\" name=\"light\" value=\"None\"/> None\n\t<input type=\"radio\" name=\"light\" value=\"Torch\"/> Torch/Light Spell\n\t<input type=\"radio\" name=\"light\" value=\"Light\"/> Light Spell (Heightened)</p>\n</form>`;\n\nlet doUpdate = false;\n\nfunction tokenUpdate(data){\n\tcanvas.tokens.controlled.map(token => token.update(data));\n}\n\nnew Dialog({\n\ttitle: \"Dying\",\n\tcontent: template,\n\tbuttons: {\n\t\tyes: {\n\t\t\ticon: \"<i class='fas fa-check'></i>\",\n\t\t\tlabel: \"Apply\",\n\t\t\tcallback: () => doUpdate = true\n\t\t},\n\t\tno: {\n\t\t\ticon: \"<i class='fas fa-times'></i>\",\n\t\t\tlabel: \"Cancel\",\n\t\t},        \n\t},\n\tdefault: \"yes\",\n\tclose: html => {\n\t\tfor (const vision of document.getElementsByName(\"vision\")) {\n\t\t\tif (vision.checked) var visionType = vision.value;\n\t\t}\n\t\tfor (const light of document.getElementsByName(\"light\")) {\n\t\t\tif (light.checked) var lightType = light.value;\n\t\t}\n\t\tlet update = {};\n\t\tswitch (visionType) {\n\t\t\tcase \"Normal\":\n\t\t\t\tupdate = {dimSight: 0, brightSight:0, vision:true,};\n\t\t\t\tbreak;\n\t\t\tcase \"Low-light\":\n\t\t\t\tupdate = {dimSight: 1000, brightSight:0, vision:true,};\n\t\t\t\tbreak;\n\t\t\tcase \"Darkvision\":\n\t\t\t\tupdate = {dimSight: 0, brightSight:1000, vision:true,};\n\t\t\t\tbreak;\n\t\t}\n\t\tswitch (lightType) {\n\t\t\tcase \"None\":\n\t\t\t\tupdate.dimLight = 0;\n\t\t\t\tupdate.brightLight = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"Torch\":\n\t\t\t\tupdate.dimLight = 40;\n\t\t\t\tupdate.brightLight = 20;\n\t\t\t\tbreak;\n\t\t\tcase \"Light\":\n\t\t\t\tupdate.dimLight = 120;\n\t\t\t\tupdate.brightLight = 60;\n\t\t\t\tbreak;\n\t\t}\n\t\tif (doUpdate) tokenUpdate(update);\n\t}\n}, {\n\tid: 'pf2-template-creator'\n}).render(true);\n})();","author":"mGuqqcfcnBeqgHV1","img":"systems/pf2e/icons/equipment/adventuring-gear/torch.jpg","actorIds":[],"_id":"2i9lMjvZ9SUgsHyB"}
{"$$deleted":true,"_id":"2i9lMjvZ9SUgsHyB"}
{"name":"Vision and Light","permission":{"default":0,"mGuqqcfcnBeqgHV1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.3XKY3hQcCniP2out"}},"scope":"global","command":"(async () => {\nif (canvas.tokens.controlled.length === 0)\n{\n\tui.notifications.warn(\"You must select at least one token.\");\n\treturn\n}\n\n\nlet template =\n\t`\n\n<form>\n\t<p>Updating lighting and vision for <span style=\"color: darkred\">${canvas.tokens.controlled.length}</span> tokens.</p>\n\t<p><b>Vision Type:</b></p>\n\t<p><input type=\"radio\" name=\"vision\" value=\"Normal\"/> Normal\n\t<input type=\"radio\" name=\"vision\" value=\"Low-light\"/> Low-light\n\t<input type=\"radio\" name=\"vision\" value=\"Darkvision\"/> Darkvision</p>\n\t<p><b>Light Source:</b></p>\n\t<p><input type=\"radio\" name=\"light\" value=\"None\"/> None\n\t<input type=\"radio\" name=\"light\" value=\"Torch\"/> Torch/Light Spell\n\t<input type=\"radio\" name=\"light\" value=\"Light\"/> Light Spell (Heightened)</p>\n</form>`;\n\nlet doUpdate = false;\n\nfunction tokenUpdate(data){\n\tcanvas.tokens.controlled.map(token => token.update(data));\n}\n\nnew Dialog({\n\ttitle: \"Token Vision and Lighting\",\n\tcontent: template,\n\tbuttons: {\n\t\tyes: {\n\t\t\ticon: \"<i class='fas fa-check'></i>\",\n\t\t\tlabel: \"Apply\",\n\t\t\tcallback: () => doUpdate = true\n\t\t},\n\t\tno: {\n\t\t\ticon: \"<i class='fas fa-times'></i>\",\n\t\t\tlabel: \"Cancel\",\n\t\t},        \n\t},\n\tdefault: \"yes\",\n\tclose: html => {\n\t\tfor (const vision of document.getElementsByName(\"vision\")) {\n\t\t\tif (vision.checked) var visionType = vision.value;\n\t\t}\n\t\tfor (const light of document.getElementsByName(\"light\")) {\n\t\t\tif (light.checked) var lightType = light.value;\n\t\t}\n\t\tlet update = {};\n\t\tswitch (visionType) {\n\t\t\tcase \"Normal\":\n\t\t\t\tupdate = {dimSight: 0, brightSight:0, vision:true,};\n\t\t\t\tbreak;\n\t\t\tcase \"Low-light\":\n\t\t\t\tupdate = {dimSight: 1000, brightSight:0, vision:true,};\n\t\t\t\tbreak;\n\t\t\tcase \"Darkvision\":\n\t\t\t\tupdate = {dimSight: 0, brightSight:1000, vision:true,};\n\t\t\t\tbreak;\n\t\t}\n\t\tswitch (lightType) {\n\t\t\tcase \"None\":\n\t\t\t\tupdate.dimLight = 0;\n\t\t\t\tupdate.brightLight = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"Torch\":\n\t\t\t\tupdate.dimLight = 40;\n\t\t\t\tupdate.brightLight = 20;\n\t\t\t\tbreak;\n\t\t\tcase \"Light\":\n\t\t\t\tupdate.dimLight = 120;\n\t\t\t\tupdate.brightLight = 60;\n\t\t\t\tbreak;\n\t\t}\n\t\tif (doUpdate) tokenUpdate(update);\n\t}\n}, {\n\tid: 'pf2-template-creator'\n}).render(true);\n})();","author":"mGuqqcfcnBeqgHV1","img":"systems/pf2e/icons/equipment/adventuring-gear/torch.jpg","actorIds":[],"_id":"1Ii3rMo6dQ5Hvv9R"}
